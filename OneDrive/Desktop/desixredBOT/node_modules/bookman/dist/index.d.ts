import { BaseAdapter } from "./adapters/BaseAdapter";
import { FS } from "./adapters/FS";
import { MongoDB } from "./adapters/MongoDB";
import { LooseObject } from "./types";
export declare const adapters: {
    FS: typeof FS;
    MongoDB: typeof MongoDB;
};
export declare class Database {
    private adapter;
    constructor(adapter?: BaseAdapter);
    private getDefaultData;
    set(name: string, value: unknown): Promise<unknown>;
    get(name: string): Promise<unknown>;
    fetch: (name: string) => Promise<unknown>;
    has(name: string): Promise<boolean>;
    push(name: string, value: unknown): Promise<unknown[]>;
    pop(name: string): Promise<unknown[]>;
    shift(name: string): Promise<unknown[]>;
    unshift(name: string, value: unknown): Promise<unknown[]>;
    add(name: string, value: number): Promise<number>;
    subtract(name: string, value: number): Promise<number>;
    delete(name: string): Promise<unknown>;
    fetchAll: () => Promise<LooseObject>;
    map: () => Promise<LooseObject>;
    all: () => Promise<LooseObject>;
    getAll: () => Promise<LooseObject>;
    destroy(): Promise<boolean>;
}
